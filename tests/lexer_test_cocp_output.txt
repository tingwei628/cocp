#2 CLASS class
#2 TYPEID CellularAutomaton
#2 INHERITS inherits
#2 TYPEID IO
#2 LBLOCK {
#3 OBJECTID population_map
#3 COLON :
#3 TYPEID String
#3 SEMICOLON ;
#5 OBJECTID init
#5 LPAREN (
#5 OBJECTID map
#5 COLON :
#5 TYPEID String
#5 RPAREN )
#5 COLON :
#5 TYPEID SELF_TYPE
#5 LBLOCK {
#6 LBLOCK {
#7 OBJECTID population_map
#7 ASSIGN <-
#7 OBJECTID map
#7 SEMICOLON ;
#8 OBJECTID self
#8 SEMICOLON ;
#9 RBLOCK }
#10 RBLOCK }
#10 SEMICOLON ;
#12 OBJECTID print
#12 LPAREN (
#12 RPAREN )
#12 COLON :
#12 TYPEID SELF_TYPE
#12 LBLOCK {
#13 LBLOCK {
#14 OBJECTID out_string
#14 LPAREN (
#14 OBJECTID population_map
#14 DISPATCH .
#14 OBJECTID concat
#14 LPAREN (
#14 STR_CONST "\n"
#14 RPAREN )
#14 RPAREN )
#14 SEMICOLON ;
#15 OBJECTID self
#15 SEMICOLON ;
#16 RBLOCK }
#17 RBLOCK }
#17 SEMICOLON ;
#19 OBJECTID num_cells
#19 LPAREN (
#19 RPAREN )
#19 COLON :
#19 TYPEID Int
#19 LBLOCK {
#20 OBJECTID population_map
#20 DISPATCH .
#20 OBJECTID length
#20 LPAREN (
#20 RPAREN )
#21 RBLOCK }
#21 SEMICOLON ;
#23 OBJECTID cell
#23 LPAREN (
#23 OBJECTID position
#23 COLON :
#23 TYPEID Int
#23 RPAREN )
#23 COLON :
#23 TYPEID String
#23 LBLOCK {
#24 OBJECTID population_map
#24 DISPATCH .
#24 OBJECTID substr
#24 LPAREN (
#24 OBJECTID position
#24 COMMA ,
#24 INT_CONST 1
#24 RPAREN )
#25 RBLOCK }
#25 SEMICOLON ;
#27 OBJECTID cell_left_neighbor
#27 LPAREN (
#27 OBJECTID position
#27 COLON :
#27 TYPEID Int
#27 RPAREN )
#27 COLON :
#27 TYPEID String
#27 LBLOCK {
#28 IF if
#28 OBJECTID position
#28 EQUAL =
#28 INT_CONST 0
#28 THEN then
#29 OBJECTID cell
#29 LPAREN (
#29 OBJECTID num_cells
#29 LPAREN (
#29 RPAREN )
#29 MINUS -
#29 INT_CONST 1
#29 RPAREN )
#30 ELSE else
#31 OBJECTID cell
#31 LPAREN (
#31 OBJECTID position
#31 MINUS -
#31 INT_CONST 1
#31 RPAREN )
#32 FI fi
#33 RBLOCK }
#33 SEMICOLON ;
#35 OBJECTID cell_right_neighbor
#35 LPAREN (
#35 OBJECTID position
#35 COLON :
#35 TYPEID Int
#35 RPAREN )
#35 COLON :
#35 TYPEID String
#35 LBLOCK {
#36 IF if
#36 OBJECTID position
#36 EQUAL =
#36 OBJECTID num_cells
#36 LPAREN (
#36 RPAREN )
#36 MINUS -
#36 INT_CONST 1
#36 THEN then
#37 OBJECTID cell
#37 LPAREN (
#37 INT_CONST 0
#37 RPAREN )
#38 ELSE else
#39 OBJECTID cell
#39 LPAREN (
#39 OBJECTID position
#39 PLUS +
#39 INT_CONST 1
#39 RPAREN )
#40 FI fi
#41 RBLOCK }
#41 SEMICOLON ;
#44 OBJECTID cell_at_next_evolution
#44 LPAREN (
#44 OBJECTID position
#44 COLON :
#44 TYPEID Int
#44 RPAREN )
#44 COLON :
#44 TYPEID String
#44 LBLOCK {
#45 IF if
#45 LPAREN (
#45 IF if
#45 OBJECTID cell
#45 LPAREN (
#45 OBJECTID position
#45 RPAREN )
#45 EQUAL =
#45 STR_CONST "X"
#45 THEN then
#45 INT_CONST 1
#45 ELSE else
#45 INT_CONST 0
#45 FI fi
#46 PLUS +
#46 IF if
#46 OBJECTID cell_left_neighbor
#46 LPAREN (
#46 OBJECTID position
#46 RPAREN )
#46 EQUAL =
#46 STR_CONST "X"
#46 THEN then
#46 INT_CONST 1
#46 ELSE else
#46 INT_CONST 0
#46 FI fi
#47 PLUS +
#47 IF if
#47 OBJECTID cell_right_neighbor
#47 LPAREN (
#47 OBJECTID position
#47 RPAREN )
#47 EQUAL =
#47 STR_CONST "X"
#47 THEN then
#47 INT_CONST 1
#47 ELSE else
#47 INT_CONST 0
#47 FI fi
#48 EQUAL =
#48 INT_CONST 1
#48 RPAREN )
#49 THEN then
#50 STR_CONST "X"
#51 ELSE else
#52 DISPATCH .
#53 FI fi
#54 RBLOCK }
#54 SEMICOLON ;
#56 OBJECTID evolve
#56 LPAREN (
#56 RPAREN )
#56 COLON :
#56 TYPEID SELF_TYPE
#56 LBLOCK {
#57 LPAREN (
#57 LET let
#57 OBJECTID position
#57 COLON :
#57 TYPEID Int
#57 IN in
#58 LPAREN (
#58 LET let
#58 OBJECTID num
#58 COLON :
#58 TYPEID Int
#58 ASSIGN <-
#58 OBJECTID num_cells
#58 LSQUAREBRACKET [
#58 RSQUAREBRACKET ]
#58 IN in
#59 LPAREN (
#59 LET let
#59 OBJECTID temp
#59 COLON :
#59 TYPEID String
#59 IN in
#60 LBLOCK {
#61 WHILE while
#61 OBJECTID position
#61 LESS <
#61 OBJECTID num
#61 LOOP loop
#62 LBLOCK {
#63 OBJECTID temp
#63 ASSIGN <-
#63 OBJECTID temp
#63 DISPATCH .
#63 OBJECTID concat
#63 LPAREN (
#63 OBJECTID cell_at_next_evolution
#63 LPAREN (
#63 OBJECTID position
#63 RPAREN )
#63 RPAREN )
#63 SEMICOLON ;
#64 OBJECTID position
#64 ASSIGN <-
#64 OBJECTID position
#64 PLUS +
#64 INT_CONST 1
#64 SEMICOLON ;
#65 RBLOCK }
#66 POOL pool
#66 SEMICOLON ;
#67 OBJECTID population_map
#67 ASSIGN <-
#67 OBJECTID temp
#67 SEMICOLON ;
#68 OBJECTID self
#68 SEMICOLON ;
#69 RBLOCK }
#70 RPAREN )
#70 RPAREN )
#70 RPAREN )
#71 RBLOCK }
#71 SEMICOLON ;
#72 RBLOCK }
#72 SEMICOLON ;
#74 CLASS class
#74 TYPEID Main
#74 LBLOCK {
#75 OBJECTID cells
#75 COLON :
#75 TYPEID CellularAutomaton
#75 SEMICOLON ;
#77 OBJECTID main
#77 LPAREN (
#77 RPAREN )
#77 COLON :
#77 TYPEID SELF_TYPE
#77 LBLOCK {
#78 LBLOCK {
#79 OBJECTID cells
#79 ASSIGN <-
#79 LPAREN (
#79 NEW new
#79 TYPEID CellularAutomaton
#79 RPAREN )
#79 DISPATCH .
#79 OBJECTID init
#79 LPAREN (
#79 STR_CONST "         X         "
#79 RPAREN )
#79 SEMICOLON ;
#80 OBJECTID cells
#80 DISPATCH .
#80 OBJECTID print
#80 LPAREN (
#80 RPAREN )
#80 SEMICOLON ;
#81 LPAREN (
#81 LET let
#81 OBJECTID countdown
#81 COLON :
#81 TYPEID Int
#81 ASSIGN <-
#81 INT_CONST 20
#81 IN in
#82 WHILE while
#82 OBJECTID countdown
#82 GREATER >
#82 INT_CONST 0
#82 LOOP loop
#83 LBLOCK {
#84 OBJECTID cells
#84 DISPATCH .
#84 OBJECTID evolve
#84 LPAREN (
#84 RPAREN )
#84 SEMICOLON ;
#85 OBJECTID cells
#85 DISPATCH .
#85 OBJECTID print
#85 LPAREN (
#85 RPAREN )
#85 SEMICOLON ;
#86 OBJECTID countdown
#86 ASSIGN <-
#86 OBJECTID countdown
#86 MINUS -
#86 INT_CONST 1
#86 SEMICOLON ;
#88 POOL pool
#89 RPAREN )
#89 SEMICOLON ;
#90 OBJECTID self
#90 SEMICOLON ;
#91 RBLOCK }
#92 RBLOCK }
#92 SEMICOLON ;
#93 RBLOCK }
#93 SEMICOLON ;
