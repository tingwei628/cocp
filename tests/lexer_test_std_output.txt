#5 CLASS class
#5 TYPEID CellularAutomaton
#5 INHERITS inherits
#5 TYPEID IO
#5 LBLOCK {
#6 OBJECTID population_map
#6 COLON :
#6 TYPEID String
#6 SEMICOLON ;
#8 OBJECTID init
#8 LPAREN (
#8 OBJECTID map
#8 COLON :
#8 TYPEID String
#8 RPAREN )
#8 COLON :
#8 TYPEID SELF_TYPE
#8 LBLOCK {
#9 LBLOCK {
#10 OBJECTID population_map
#10 ASSIGN <-
#10 OBJECTID map
#10 SEMICOLON ;
#11 OBJECTID self
#11 SEMICOLON ;
#12 RBLOCK }
#13 RBLOCK }
#13 SEMICOLON ;
#15 OBJECTID print
#15 LPAREN (
#15 RPAREN )
#15 COLON :
#15 TYPEID SELF_TYPE
#15 LBLOCK {
#16 LBLOCK {
#17 OBJECTID out_string
#17 LPAREN (
#17 OBJECTID population_map
#17 DISPATCH .
#17 OBJECTID concat
#17 LPAREN (
#17 STR_CONST "\n"
#17 RPAREN )
#17 RPAREN )
#17 SEMICOLON ;
#18 OBJECTID self
#18 SEMICOLON ;
#19 RBLOCK }
#20 RBLOCK }
#20 SEMICOLON ;
#22 OBJECTID num_cells
#22 LPAREN (
#22 RPAREN )
#22 COLON :
#22 TYPEID Int
#22 LBLOCK {
#23 OBJECTID population_map
#23 DISPATCH .
#23 OBJECTID length
#23 LPAREN (
#23 RPAREN )
#24 RBLOCK }
#24 SEMICOLON ;
#26 OBJECTID cell
#26 LPAREN (
#26 OBJECTID position
#26 COLON :
#26 TYPEID Int
#26 RPAREN )
#26 COLON :
#26 TYPEID String
#26 LBLOCK {
#27 OBJECTID population_map
#27 DISPATCH .
#27 OBJECTID substr
#27 LPAREN (
#27 OBJECTID position
#27 COMMA ,
#27 INT_CONST 1
#27 RPAREN )
#28 RBLOCK }
#28 SEMICOLON ;
#30 OBJECTID cell_left_neighbor
#30 LPAREN (
#30 OBJECTID position
#30 COLON :
#30 TYPEID Int
#30 RPAREN )
#30 COLON :
#30 TYPEID String
#30 LBLOCK {
#31 IF if
#31 OBJECTID position
#31 EQUAL =
#31 INT_CONST 0
#31 THEN then
#32 OBJECTID cell
#32 LPAREN (
#32 OBJECTID num_cells
#32 LPAREN (
#32 RPAREN )
#32 MINUS -
#32 INT_CONST 1
#32 RPAREN )
#33 ELSE else
#34 OBJECTID cell
#34 LPAREN (
#34 OBJECTID position
#34 MINUS -
#34 INT_CONST 1
#34 RPAREN )
#35 FI fi
#36 RBLOCK }
#36 SEMICOLON ;
#38 OBJECTID cell_right_neighbor
#38 LPAREN (
#38 OBJECTID position
#38 COLON :
#38 TYPEID Int
#38 RPAREN )
#38 COLON :
#38 TYPEID String
#38 LBLOCK {
#39 IF if
#39 OBJECTID position
#39 EQUAL =
#39 OBJECTID num_cells
#39 LPAREN (
#39 RPAREN )
#39 MINUS -
#39 INT_CONST 1
#39 THEN then
#40 OBJECTID cell
#40 LPAREN (
#40 INT_CONST 0
#40 RPAREN )
#41 ELSE else
#42 OBJECTID cell
#42 LPAREN (
#42 OBJECTID position
#42 PLUS +
#42 INT_CONST 1
#42 RPAREN )
#43 FI fi
#44 RBLOCK }
#44 SEMICOLON ;
#48 OBJECTID cell_at_next_evolution
#48 LPAREN (
#48 OBJECTID position
#48 COLON :
#48 TYPEID Int
#48 RPAREN )
#48 COLON :
#48 TYPEID String
#48 LBLOCK {
#49 IF if
#49 LPAREN (
#49 IF if
#49 OBJECTID cell
#49 LPAREN (
#49 OBJECTID position
#49 RPAREN )
#49 EQUAL =
#49 STR_CONST "X"
#49 THEN then
#49 INT_CONST 1
#49 ELSE else
#49 INT_CONST 0
#49 FI fi
#50 PLUS +
#50 IF if
#50 OBJECTID cell_left_neighbor
#50 LPAREN (
#50 OBJECTID position
#50 RPAREN )
#50 EQUAL =
#50 STR_CONST "X"
#50 THEN then
#50 INT_CONST 1
#50 ELSE else
#50 INT_CONST 0
#50 FI fi
#51 PLUS +
#51 IF if
#51 OBJECTID cell_right_neighbor
#51 LPAREN (
#51 OBJECTID position
#51 RPAREN )
#51 EQUAL =
#51 STR_CONST "X"
#51 THEN then
#51 INT_CONST 1
#51 ELSE else
#51 INT_CONST 0
#51 FI fi
#52 EQUAL =
#52 INT_CONST 1
#52 RPAREN )
#53 THEN then
#54 STR_CONST "X"
#55 ELSE else
#56 ERROR "'"
#56 DISPATCH .
#56 ERROR "'"
#57 FI fi
#58 RBLOCK }
#58 SEMICOLON ;
#60 OBJECTID evolve
#60 LPAREN (
#60 RPAREN )
#60 COLON :
#60 TYPEID SELF_TYPE
#60 LBLOCK {
#61 LPAREN (
#61 LET let
#61 OBJECTID position
#61 COLON :
#61 TYPEID Int
#61 IN in
#62 LPAREN (
#62 LET let
#62 OBJECTID num
#62 COLON :
#62 TYPEID Int
#62 ASSIGN <-
#62 OBJECTID num_cells
#62 ERROR "["
#62 ERROR "]"
#62 IN in
#63 LPAREN (
#63 LET let
#63 OBJECTID temp
#63 COLON :
#63 TYPEID String
#63 IN in
#64 LBLOCK {
#65 WHILE while
#65 OBJECTID position
#65 LESS <
#65 OBJECTID num
#65 LOOP loop
#66 LBLOCK {
#67 OBJECTID temp
#67 ASSIGN <-
#67 OBJECTID temp
#67 DISPATCH .
#67 OBJECTID concat
#67 LPAREN (
#67 OBJECTID cell_at_next_evolution
#67 LPAREN (
#67 OBJECTID position
#67 RPAREN )
#67 RPAREN )
#67 SEMICOLON ;
#68 OBJECTID position
#68 ASSIGN <-
#68 OBJECTID position
#68 PLUS +
#68 INT_CONST 1
#68 SEMICOLON ;
#69 RBLOCK }
#70 POOL pool
#70 SEMICOLON ;
#71 OBJECTID population_map
#71 ASSIGN <-
#71 OBJECTID temp
#71 SEMICOLON ;
#72 OBJECTID self
#72 SEMICOLON ;
#73 RBLOCK }
#74 RPAREN )
#74 RPAREN )
#74 RPAREN )
#75 RBLOCK }
#75 SEMICOLON ;
#76 RBLOCK }
#76 SEMICOLON ;
#78 CLASS class
#78 TYPEID Main
#78 LBLOCK {
#79 OBJECTID cells
#79 COLON :
#79 TYPEID CellularAutomaton
#79 SEMICOLON ;
#81 OBJECTID main
#81 LPAREN (
#81 RPAREN )
#81 COLON :
#81 TYPEID SELF_TYPE
#81 LBLOCK {
#82 LBLOCK {
#83 OBJECTID cells
#83 ASSIGN <-
#83 LPAREN (
#83 NEW new
#83 TYPEID CellularAutomaton
#83 RPAREN )
#83 DISPATCH .
#83 OBJECTID init
#83 LPAREN (
#83 STR_CONST "         X         "
#83 RPAREN )
#83 SEMICOLON ;
#84 OBJECTID cells
#84 DISPATCH .
#84 OBJECTID print
#84 LPAREN (
#84 RPAREN )
#84 SEMICOLON ;
#85 LPAREN (
#85 LET let
#85 OBJECTID countdown
#85 COLON :
#85 TYPEID Int
#85 ASSIGN <-
#85 INT_CONST 20
#85 IN in
#86 WHILE while
#86 OBJECTID countdown
#86 ERROR ">"
#86 INT_CONST 0
#86 LOOP loop
#87 LBLOCK {
#88 OBJECTID cells
#88 DISPATCH .
#88 OBJECTID evolve
#88 LPAREN (
#88 RPAREN )
#88 SEMICOLON ;
#89 OBJECTID cells
#89 DISPATCH .
#89 OBJECTID print
#89 LPAREN (
#89 RPAREN )
#89 SEMICOLON ;
#90 OBJECTID countdown
#90 ASSIGN <-
#90 OBJECTID countdown
#90 MINUS -
#90 INT_CONST 1
#90 SEMICOLON ;
#92 POOL pool
#93 RPAREN )
#93 SEMICOLON ;
#98 ERROR "EOF in comment"
